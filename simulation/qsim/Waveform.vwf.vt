// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/03/2024 22:14:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PRINCIPAL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PRINCIPAL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg 50MHZ;
reg A;
reg B;
reg C;
reg ENN;
reg KEY0;
reg SW7;
reg SW8;
reg SW9;
// wires                                               
wire [6:0] H0;
wire [6:0] H1;
wire [5:0] LD;
wire [3:0] Q;

// assign statements (if any)                          
PRINCIPAL i1 (
// port map - connection between master ports and signals/registers   
	.\50MHZ (50MHZ),
	.A(A),
	.B(B),
	.C(C),
	.ENN(ENN),
	.H0(H0),
	.H1(H1),
	.KEY0(KEY0),
	.LD(LD),
	.Q(Q),
	.SW7(SW7),
	.SW8(SW8),
	.SW9(SW9)
);
initial 
begin 
#1000000 $finish;
end 

// 50MHZ
always
begin
	50MHZ = 1'b0;
	50MHZ = #10000 1'b1;
	#10000;
end 

// KEY0
initial
begin
	KEY0 = 1'b0;
	KEY0 = #10000 1'b1;
end 

// ENN
initial
begin
	ENN = 1'b1;
end 

// A
initial
begin
	A = 1'b0;
	A = #320000 1'b1;
	A = #320000 1'b0;
	A = #320000 1'b1;
end 

// B
initial
begin
	repeat(3)
	begin
		B = 1'b0;
		B = #160000 1'b1;
		# 160000;
	end
	B = 1'b0;
end 

// C
initial
begin
	repeat(6)
	begin
		C = 1'b0;
		C = #80000 1'b1;
		# 80000;
	end
	C = 1'b0;
end 
endmodule

